package net.wushilin.jdbc.debug;

import java.sql.*;

public class WrappingStatement implements Statement {
    private DebuggingDataSource ds;
    private Statement src;
    private Connection conn;

    private long created = System.currentTimeMillis();
    public WrappingStatement(DebuggingDataSource ds, Connection conn, Statement stmt) {
        this.ds = ds;
        this.src = stmt;
        this.conn = conn;
    }
    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        return ds.wrap(this, src.executeQuery(sql));
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        return src.executeUpdate(sql);
    }

    @Override
    public void close() throws SQLException {
        src.close();
        ds.release(src);
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return src.getMaxFieldSize();
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        src.setMaxFieldSize(max);
    }

    @Override
    public int getMaxRows() throws SQLException {
        return src.getMaxRows();
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        src.setMaxRows(max);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        src.setEscapeProcessing(enable);
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return src.getQueryTimeout();
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        src.setQueryTimeout(seconds);
    }

    @Override
    public void cancel() throws SQLException {
        src.cancel();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return src.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        src.clearWarnings();
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        src.setCursorName(name);
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        return src.execute(sql);
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return src.getResultSet();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return src.getUpdateCount();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return src.getMoreResults();
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        src.setFetchDirection(direction);
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return src.getFetchDirection();
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        src.setFetchSize(rows);
    }

    @Override
    public int getFetchSize() throws SQLException {
        return src.getFetchSize();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return src.getResultSetConcurrency();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return src.getResultSetType();
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        src.addBatch(sql);
    }

    @Override
    public void clearBatch() throws SQLException {
        src.clearBatch();
    }

    @Override
    public int[] executeBatch() throws SQLException {
        return src.executeBatch();
    }

    @Override
    public Connection getConnection() throws SQLException {
        return conn;
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return src.getMoreResults(current);
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return src.getGeneratedKeys();
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return src.executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return src.executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return src.executeUpdate(sql, columnNames);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return src.execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return src.execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return src.execute(sql, columnNames);
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return src.getResultSetHoldability();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return src.isClosed();
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        src.setPoolable(poolable);
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return src.isPoolable();
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        src.closeOnCompletion();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return src.isCloseOnCompletion();
    }

    @Override
    public long getLargeUpdateCount() throws SQLException {
        return src.getLargeUpdateCount();
    }

    @Override
    public void setLargeMaxRows(long max) throws SQLException {
        src.setLargeMaxRows(max);
    }

    @Override
    public long getLargeMaxRows() throws SQLException {
        return src.getLargeMaxRows();
    }

    @Override
    public long[] executeLargeBatch() throws SQLException {
        return src.executeLargeBatch();
    }

    @Override
    public long executeLargeUpdate(String sql) throws SQLException {
        return src.executeLargeUpdate(sql);
    }

    @Override
    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return src.executeLargeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return src.executeLargeUpdate(sql, columnIndexes);
    }

    @Override
    public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {
        return src.executeLargeUpdate(sql, columnNames);
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return src.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return src.isWrapperFor(iface);
    }

    public String toString() {
        return String.format("[Created %d ms ago] "+this.getClass().getSimpleName()+"@" + System.identityHashCode(this) + "[ %s ]", System.currentTimeMillis() - created, src);

    }
}
